/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'

def gitRevision = { ->
  def hashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "-n", "1", "--format=%H"
    standardOutput = hashStdOut
  }

  return hashStdOut.toString().trim()
}

project.ext.gitRevision = gitRevision()

group = 'tol.info.gocd.plugin'
version = '2.0.4'

// these values that go into plugin.xml
project.ext.pluginDesc = [
  id         : 'cd.go.artifact.webdav',
  version    : project.version,
  goCdVersion: '18.7.0',
  name       : 'WebDAV Artifact Plugin for GoCD',
  description: 'Plugin allows to push/pull artifacts using WebDAV',
  vendorName : 'TOL GmbH',
  vendorUrl  : 'https://github.com/territorium/gocd-webdav-artifact-plugin.git'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
  mavenLocal()
}

sourceSets {
  test {
    java {
      compileClasspath += configurations.compileOnly
      runtimeClasspath += configurations.compileOnly
    }
  }
}

configurations.implementation.canBeResolved = true
configurations.api.canBeResolved = true

dependencies {
  compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '20.9.0'
  // https://mvnrepository.com/artifact/com.github.lookfirst/sardine
  implementation group: 'com.github.lookfirst', name: 'sardine', version: '5.12'
  implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
  implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'


  // This dependency is used internally, and not exposed to consumers on their own compile classpath.
  implementation 'com.google.guava:guava:23.0'

  // Use JUnit test framework
  testImplementation group: 'junit', name: 'junit', version: '4.12'
  testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
  testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
}

processResources {
  from("src/main/resource-templates") {
    filesMatching('plugin.xml') {
      expand project.pluginDesc
    }

    filesMatching('plugin.properties') {
      expand project.pluginDesc
    }
  }
}

test {
  testLogging {
    showStandardStreams = true

    exceptionFormat 'full'

    beforeSuite { suite ->
      if (suite.parent) {
        logger.quiet("Running ${suite.name}")
      }
    }

    afterSuite { suite, result ->
      if (suite.parent) {
        logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        if (result.resultType == TestResult.ResultType.FAILURE) {
          logger.quiet("Test ${suite.name} FAILED")
        }
      } else {
        logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
      }
    }
  }
}

jar {
  manifest {
    attributes(
      'Go-Version': project.version,
      'Go-Revision': project.gitRevision,
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Source-Compatibility': project.sourceCompatibility,
      'Target-Compatibility': project.targetCompatibility
    )
  }

  from(configurations.implementation) {
    into "lib/"
  }
  from(sourceSets.main.java) {
    into "/"
  }
}
